#+Title: Emacs Configuration
#+Author: Shik0
#+EMAIL: olachico@icloud.com

This repository contains an Emacs configuration I made. I used org
mode to help me organize all of the configuration needed

* Dependency management

** Define Package repositories(archives)

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** Define packages that are to be installed


#+BEGIN_SRC emacs-lisp

  (defvar my-packages '(ac-js2
                        ag
                        all-the-icons
                        atomic-chrome
                        auto-complete
                        autopair
                        beacon
                        browse-kill-ring
                        comment-tags
                        company
                        company-lsp
                        dap-mode
                        dashboard
                        deft
                        dired-subtree
                        dired-narrow
                        diminish
                        doom-modeline
                        dumb-jump
                        editorconfig
                        elfeed
                        elfeed-goodies
                        elixir-mode
                        evil
                        evil-escape
                        evil-leader
                        evil-mc
                        evil-numbers
                        evil-surround
                        enh-ruby-mode
                        exec-path-from-shell
                        eyebrowse
                        exunit
                        fira-code-mode
                        forge
                        flycheck
                        flycheck-credo
                        flycheck-flow
                        flycheck-rust
                        ghub
                        hide-mode-line
                        hydra
                        lsp-mode
                        lsp-ui
                        ido-vertical-mode
                        impatient-mode
                        ini-mode
                        ivy counsel swiper
                        json-mode
                        js2-mode
                        js2-refactor
                        magit
                        markdown-mode
                        neotree
                        package-lint
                        page-break-lines
                        parinfer
                        pdf-tools
                        projectile
                        rainbow-mode
                        rjsx-mode
                        rust-mode
                        ob-restclient
                        org-bullets
                        restclient
                        robe
                        rspec-mode
                        rust-mode
                        sass-mode
                        smartparens
                        smex
                        synosaurus
                        tide
                        visual-fill-column
                        vterm
                        web-mode
                        which-key
                        writegood-mode
                        writeroom-mode
                        yaml-mode
                        zenburn-theme))

#+END_SRC

** Install packages

#+BEGIN_SRC emacs-lisp
  (dolist (p my-packages)
    (unless (package-installed-p p)
      (package-refresh-contents)
      (package-install p))
    (add-to-list 'package-selected-packages p))
#+END_SRC


* Theme & other configurations
  
** Configure zen-mode theme
#+BEGIN_SRC emacs-lisp
  (defun zen-mode ()
    "Default theme and font size."
    (interactive)

    ;; Dark
    (load-theme 'zenburn t)
    (setq frame-background-mode (quote dark))
     )

#+END_SRC

** Enable default theme and font
#+BEGIN_SRC emacs-lisp
  (zen-mode)
#+END_SRC

** General configuration
#+BEGIN_SRC emacs-lisp
(when (and window-system
           (eq system-type 'darwin)
           (not (version< emacs-version "26.1")))
  (setq frame-title-format nil
        ns-use-proxy-icon nil)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)))

(toggle-frame-fullscreen)
(autopair-global-mode)
#+END_SRC

** Neotree configuration

#+BEGIN_SRC emacs-lisp
(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+END_SRC

** Modeline configuration

#+BEGIN_SRC emacs-lisp

;; Removes load average from modeline
(setq display-time-default-load-average nil)

(doom-modeline-mode 1)


;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

(setq doom-modeline-display-default-persp-name nil)

(setq doom-modeline-project-detection 'projectile)

(setq doom-modeline-buffer-file-state-icon nil)

#+END_SRC


* Dashboard
Here I use Emacs Dashboard, to display my recents, bookmarks,
projects, agenda mainly. This also centers the content.

 #+BEGIN_SRC emacs-lisp
 (dashboard-setup-startup-hook)
 (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
 (setq dashboard-startup-banner 3)
 (setq dashboard-banner-logo-title "Howdy!")
 (setq dashboard-items '((recents  . 5) (bookmarks . 5) (projects . 5)
(agenda . 5)))
(setq dashboard-center-content t)
(setq dashboard-set-heading-icons nil)
(setq dashboard-set-file-icons t)
(setq dashboard-set-footer nil)
#+END_SRC


* Default settings

** Gargabe Collection

   Allow 20MB of memory (instead of 0.76MB) before calling garbage
   collection.

   #+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
   #+END_SRC

** Do not create backup files

   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
   #+END_SRC

** Auto-Save in =/tmp=

   Store backups and auto-saved files in =TEMPORARY-FILE-DIRECTORY= (which
   defaults to /tmp on Unix), instead of in the same directory as the
   file.

   #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
   #+END_SRC

** Confirm before closing Emacs

   #+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
   #+END_SRC

** Ask =y/n= instead of =yes/no=

   this is a favorable shorthand.
   #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Auto revert files on change

   When something changes a file, automatically refresh the
   buffer containing that file so they can't get out of sync.

   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
   #+END_SRC

** Shortcut for changing font-size

   #+BEGIN_SRC emacs-lisp
  (defun zoom-in ()
    (interactive)
    (let ((x (+ (face-attribute 'default :height)
                10)))
      (set-face-attribute 'default nil :height x)))

  (defun zoom-out ()
    (interactive)
    (let ((x (- (face-attribute 'default :height)
                10)))
      (set-face-attribute 'default nil :height x)))

  (define-key global-map (kbd "C-1") 'zoom-in)
  (define-key global-map (kbd "C-0") 'zoom-out)
   #+END_SRC

** Display the current time

   #+BEGIN_SRC emacs-lisp
  (display-time-mode t)
   #+END_SRC

** Do not display GUI toolbar

   #+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
   #+END_SRC

** Automatic Line Breaks

   Do not enable automatic line breaks for all text-mode based hooks,
   because several text-modes (markdown, mails) enjoy the pain of long
   lines. So here, I only add whitelisted modes sparingly. the other
   modes have a =visual-clean= configuration which makes the text look
   nice locally, at least.

   #+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
   #+END_SRC

** Enable Narrow to Region

   Enable narrow-to-region (C-x n n / C-x n w). this is disabled by
   default to not confuse beginners.

   #+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
   #+END_SRC

** Disable scroll bars

   #+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
   #+END_SRC

** Remember the cursor position of files when reopening them

   #+BEGIN_SRC emacs-lisp
  (setq save-place-file "~/.emacs.d/saveplace")
  (setq-default save-place t)
  (require 'saveplace)
   #+END_SRC

** Remove Bell

   Ignore the system bell

   #+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
   #+END_SRC

** Helper functions to clean up gazillions of trilions of buffers

   #+BEGIN_SRC emacs-lisp
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
   #+END_SRC

   =dired= will create buffers for every visited folder. this is a helper
   to clear them out once you're done working with those folders.

   #+BEGIN_SRC emacs-lisp
  (defun kill-dired-buffers ()
    "Kill all open dired buffers."
    (interactive)
    (mapc (lambda (buffer)
            (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
              (kill-buffer buffer)))
          (buffer-list)))
   #+END_SRC


* General

this section contains settings for non-built-in Emacs features.

** =beacon-mode=

Whenever the window scrolls a light will shine on top of your cursor so you know where it is.

#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
#+END_SRC

** =which-key=
   =which-key= displays available keybindings in a popup.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'which-key-mode)
#+END_SRC

** Dired mode
  #+BEGIN_SRC emacs-lisp
      (setq dired-mode-map (make-keymap))
      (suppress-keymap dired-mode-map)
      (define-key dired-mode-map "j" 'dired-next-line)
      (define-key dired-mode-map "k" 'dired-previous-line)
      (define-key dired-mode-map (kbd "<tab>") 'dired-subtree-toggle)
      (define-key dired-mode-map (kbd "<C-tab>") 'dired-subtree-cycle)
      (define-key dired-mode-map (kbd "<S-iso-lefttab>") 'dired-subtree-remove)
      (define-key dired-mode-map "p"
          (lambda ()
            (interactive)
            (find-alternate-file "..")))
  #+END_SRC


* Programming
  
** General

*** Auto Complete

Basic Configuration

#+BEGIN_SRC emacs-lisp
  (ac-config-default)
#+END_SRC

*** tabs

Set tab width to 2 for all buffers

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Use 2 spaces instead of a tab.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2 indent-tabs-mode nil)
#+END_SRC

Indentation cannot insert tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Use 2 spaces instead of tabs for programming languages.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (setq css-indent-offset 2)

  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))

  (setq web-mode-markup-indent-offset 2)
#+END_SRC

*** Syntax Checking

Enable global on the fly syntax checking through =flycheck=.

#+BEGIN_SRC emacs-lisp

  (add-hook 'after-init-hook 'global-flycheck-mode)

#+END_SRC

*** Auto-indent with the Return key

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

*** Highlight matching parenthesis

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

*** Code Folding

Enable code folding for programming modes.

- =zc=: Fold
- =za=: Unfold
- =zR=: Unfold everything

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC
*** Line numbers



#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook '(lambda ()
                               (if (version<= emacs-version "26.0.50")
                                   (linum-mode)
                                 (display-line-numbers-mode))))
#+END_SRC

** Ruby

*** Standard linters

For syntax checking to work, installing the command-line linter tools
[[https://gitlab.com/yorickpeterse/ruby-lint][ruby-lint]] and [[https://eslint.org/][eslint]] are a premise:

#+BEGIN_SRC shell
gem install rubocop ruby-lint
npm install -g eslint
#+END_SRC

*** Configuration

#+BEGIN_SRC emacs-lisp
  (setq ruby-indent-level 2)
  ;; scss-mode blocks Emacs when opening bigger files, so open them with css-mode
  (add-to-list 'auto-mode-alist '("\\.scss?\\'" . css-mode))

  (add-to-list 'auto-mode-alist '("\\.rb?\\'" . enh-ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rake?\\'" . enh-ruby-mode))
#+END_SRC

*** =robe-mode=

Code navigation, documentation lookup and completion for Ruby

#+BEGIN_SRC emacs-lisp
  (add-hook 'enh-ruby-mode-hook 'robe-mode)
  (add-hook 'robe-mode-hook 'ac-robe-setup)
  (add-to-list 'auto-mode-alist '("\\.erb?\\'" . robe-mode))
#+END_SRC

Start =robe-mode= with =M-x robe-start=.

Shortcuts:

- =C-c C-d= Lookup documentation
- =M-.= Jump to definition
- =tAB= Auto-completion through =auto-complete-mode=

**** =auto-complete= for =robe-mode=

#+BEGIN_SRC emacs-lisp

(add-hook 'enh-ruby-mode-hook 'auto-complete-mode)

#+END_SRC

** JavaScript

*** =tide-mode=

Claim: typeScript Interactive Development Environment for Emacs.
However, also JavaScript development gets big improvements with
=tide-mode=.

tide is an alternative to [[http://ternjs.net/][tern]] which also has great Emacs integration
and which I have happily been using for years. However, tide works
even better (in my experience).

For completion to work in a Node.js project, a =jsconfig.json= file
like this is required:

#+BEGIN_SRC json
{
    "compilerOptions": {
        "target": "es6"
    },
    "exclude": [
        "node_modules"
    ]
}
#+END_SRC

If no project file is found, it’ll fall back to an inferred
configuration.

tide default shortcuts:

- =M-.= Jump to the definition of the thing under the cursor.
- =M-,= Brings you back to last place you were when you pressed M-..

**** Custom shortcuts

#+BEGIN_SRC emacs-lisp
  (require 'rjsx-mode)
  (define-key rjsx-mode-map (kbd "C-c C-r") 'tide-rename-symbol)
  (define-key rjsx-mode-map (kbd "C-c C-d") 'tide-documentation-at-point)
#+END_SRC

**** Setup

#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    ;; For bigger JS projects and intense tasks like =tide=references=
    ;; the default of 2s will time out
    (setq tide-sync-request-timeout 10)
    (tide-setup)
    ;; Increase sync request timeout for bigger projects
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))
  
  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'rjsx-mode-hook #'setup-tide-mode)

  ;;TSX support
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . web-mode))
  (add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
#+END_SRC

*** =rjsx-mode=

https://github.com/felipeochoa/rjsx-mode

this mode derives from js2-mode, extending its parser to support JSX
syntax according to the official spec. this means you get all of the
js2 features plus proper syntax checking and highlighting of JSX code
blocks.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
#+END_SRC
*** General JavaScript configuration

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (setq js2-highlight-level 3)
  (setq js-indent-level 2)
#+END_SRC
** LSP
  #+BEGIN_SRC emacs-lisp
    (require 'company-lsp)
    (push 'company-lsp company-backends)

    (use-package lsp-mode
      :diminish (lsp-mode . "lsp")
      :bind (:map lsp-mode-map
            ("C-c C-d" . lsp-describe-thing-at-point))
      :hook ((rust-mode . #'lsp-deferred)
             (c-mode . #'lsp-deferred)
             (elixir-mode . #'lsp-deferred))
      :init (setq lsp-auto-guess-root t       ; Detect project root
                  lsp-log-io nil
                  lsp-enable-indentation t
                  lsp-enable-imenu t
                  lsp-keymap-prefix "C-l"
                  lsp-file-watch-threshold 500
                  lsp-prefer-flymake nil)      ; Use lsp-ui and flycheck

            (defun lsp-on-save-operation ()
                (when (or (boundp 'lsp-mode)
                  (bound-p 'lsp-deferred))
                  (lsp-organize-imports)
                  (lsp-format-buffer))))

    (use-package lsp-ui
      :ensure t
      :after (lsp-mode)
      :commands lsp-ui-doc-hide
      :bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references)
         ("C-c u" . lsp-ui-imenu))
      :init (setq lsp-ui-doc-enable t
         lsp-ui-doc-use-webkit nil
         lsp-ui-doc-header nil
         lsp-ui-doc-delay 0.2
         lsp-ui-doc-include-signature t
         lsp-ui-doc-alignment 'at-point
         lsp-ui-doc-use-childframe nil
         lsp-ui-doc-border (face-foreground 'default)
         lsp-ui-peek-enable t
         lsp-ui-peek-show-directory t
         lsp-ui-sideline-update-mode 'line
         lsp-ui-sideline-enable t
         lsp-ui-sideline-show-code-actions t
         lsp-ui-sideline-show-hover nil
         lsp-ui-sideline-ignore-duplicate t)
      :config
         (add-to-list 'lsp-ui-doc-frame-parameters '(right-fringe . 8))

       ;; `C-g'to close doc
       (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

       ;; Reset `lsp-ui-doc-background' after loading theme
       (add-hook 'after-load-theme-hook
       (lambda ()
         (setq lsp-ui-doc-border (face-foreground 'default))
         (set-face-background 'lsp-ui-doc-background
                              (face-background 'tooltip))))

        ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
        ;; @see https://github.com/emacs-lsp/lsp-ui/issues/243
        (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
          (setq mode-line-format nil)))

      ;; Debug
      (use-package dap-mode
        :diminish dap-mode
        :ensure t
        :after (lsp-mode)
        :functions dap-hydra/nil
        :bind (:map lsp-mode-map
           ("<f5>" . dap-debug)
           ("M-<f5>" . dap-hydra))
        :hook ((dap-mode . dap-ui-mode)
          (dap-session-created . (lambda (&_rest) (dap-hydra)))
          (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))
  #+END_SRC

** Web
*** rainbow-mode

=rainbow-mode= is a minor mode for Emacs which displays strings
representing colors with the color they represent as background.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC
*** Impatient Mode

Live JavaScript Coding Emacs/Browser: See your changes in the browser as you type

**** Usage

Enable the web server provided by simple-httpd: =M-x httpd-start=

Publish buffers by enabling the minor mode impatient-mode: =M-x impatient-mode=

And then point your browser to http://localhost:8080/imp/, select a
buffer, and watch your changes appear as you type!

*** web-mode

http://web-mode.org/

web-mode.el is an autonomous major-mode for editing web templates.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;; Ruby templates
  (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
  ;; JSON
  (add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))
  ;; Svelte
  (add-to-list 'auto-mode-alist '("\\.svelte?\\'" . web-mode))

  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-ac-sources-alist
    '(("html" . (ac-source-words-in-buffer ac-source-abbrev))))
#+END_SRC
** yaml

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook 'flyspell-mode)
#+END_SRC

Unfortunately line breaks are semantic in some versions of markdown
(for example Github). So doing automatic line breaks would be harmful.
However, this leads to super long lines in many documents which is
unreadable. therefore, always use =visual-clean=.

#+BEGIN_SRC emacs-lisp
    (add-hook 'markdown-mode-hook 'visual-clean)
#+END_SRC

** Magit

*** Configuration

Create shortcut for =Magit=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

*** Start the commit buffer in evil normal mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'with-editor-mode-hook 'evil-normal-state)
#+END_SRC

** Forge

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'magit
  (require 'forge))
#+END_SRC

Show assigned issues and PRs directly in the status buffer:

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'magit
  (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-assigned-issues   nil t)
  (magit-add-section-hook 'magit-status-sections-hook 'forge-insert-assigned-pullreqs   nil t))
#+END_SRC

** Projectile
    
    Projectile is a tool to manage project navigation. It's one of the
    most used tool on this config.

*** Configuration

     Enable Projectile globally

     #+BEGIN_SRC emacs-lisp
       (setq projectile-project-search-path '("~/Projects/"))
       (projectile-mode +1)
     #+END_SRC
     
     
** Dumb Jump
   #+BEGIN_SRC emacs-lisp
     (dumb-jump-mode)
     (setq dumb-jump-selector 'ivy)
   #+END_SRC
** EyeBrowse

#+BEGIN_SRC emacs-lisp
  (eyebrowse-mode t)
#+END_SRC

** Hydra

   Hydra is a beast! And once dominated you can invoke her body. The
   number of heads... you decide.

*** Hydra/Projectile
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-projectile (global-map "C-c p"
                                  :columns 3
                                  :exit t)
        "Projectile"
        ("a" projectile-ag                "Silver Searcher" ) 
        ("b" projectile-switch-to-buffer  "Buffers"         )
        ("c" projectile-invalidate-cache  "Invalidate Cache")
        ("d" projectile-find-dir          "Find directory"  )
        ("f" projectile-find-file         "Find file"       )
        ("s" projectile-switch-project    "Switch project"  )
      )
    #+END_SRC

*** Hydra/Eyebrowse
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-eyebrowse (global-map "C-c w"
                                 :columns 3
                                 :exit t)
        "Eyebrowse"
          ("p" eyebrowse-prev-window-config             "Previous window"   )
          ("n" eyebrowse-next-window-config             "Next window"       )
          ("l" eyebrowse-last-window-config             "Last window"       )
          ("r" eyebrowse-rename-window-config           "Rename window"     )
          ("c" eyebrowse-create-window-config           "Create window"     )
          ("C" eyebrowse-close-window-config            "Close window"      )
          ("0" eyebrowse-switch-to-window-config-0      "0"                 )
          ("1" eyebrowse-switch-to-window-config-1      "1"                 )
          ("2" eyebrowse-switch-to-window-config-2      "2"                 )
          ("3" eyebrowse-switch-to-window-config-3      "3"                 )
          ("4" eyebrowse-switch-to-window-config-4      "4"                 )
          ("5" eyebrowse-switch-to-window-config-5      "5"                 )
        )
    #+END_SRC

 
* Evil

This are the general configurations for the Evil Mode

** Activate Evil
   
#+BEGIN_SRC emacs-lisp
  (evil-mode t)
  ;; Enable "M-x" in evil mode
  (global-set-key (kbd "M-x") 'execute-extended-command)
#+END_SRC

** Leader configs

   Set the leader configurations

#+BEGIN_SRC emacs-lisp
  (global-evil-leader-mode)
  (evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  "w" 'basic-save-buffer
  "s" 'flyspell-buffer
  "b" 'evil-buffer
  "q" 'evil-quit)
#+END_SRC

** Activate Evil surround

This emulates the same behaviour as the "surround.vim" package for vim
made by tpope

#+BEGIN_SRC emacs-lisp
  (global-evil-surround-mode 1)
#+END_SRC

** Activate multiple cursors
#+BEGIN_SRC emacs-lisp
  (global-evil-mc-mode 1)
#+END_SRC


** Fast switching between buffers
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "{") 'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "}") 'evil-prev-buffer)
#+END_SRC

** Use "J/K" for browsing wrapped lines

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+END_SRC

** Paste in visual mode
#+BEGIN_SRC emacs-lisp
  (define-key evil-insert-state-map (kbd "C-v") 'evil-visual-paste)
#+END_SRC

** Disable evil-mode for some modes
#+BEGIN_SRC emacs-lisp
 (mapc (lambda (mode)
        (evil-set-initial-state mode 'emacs)) '(elfeed-show-mode
                                                elfeed-search-mode
                                                forge-pullreq-list-mode
                                                forge-topic-list-mode
                                                dired-mode
                                                tide-references-mode
                                                image-dired-mode
                                                dashboard-mode
                                                image-dired-thumbnail-mode
                                                eww-mode))
#+END_SRC

** Evil-escape configs#+BEGIN_SRC emacs-lisp
  (setq-default evil-escape-delay 0.2)
  (setq-default evil-escape-key-sequence "jk")
  (evil-escape-mode)
#+END_SRC

** Which Key

This package displays available keybindings on a popup. Let's use this
to display VIM shortcuts also.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'which-key-mode)
  (add-hook 'cider-mode-hook 'which-key-mode)

  (setq which-key-allow-evil-operators t)
  (setq which-key-show-operator-state-maps t)
#+END_SRC


* Org

** General Config

#+BEGIN_SRC emacs-lisp
  (setq ORG-DIRECtORY "~/Documents/org/")
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
#+END_SRC

** Deft Configurations
  #+BEGIN_SRC emacs-lisp
    (setq deft-extensions '("org", "txt"))
    (setq deft-directory "~/Documents/org/")
  #+END_SRC

** Language support for org mode

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (shell . t)
   (dot . t)
   (js . t)
   (ruby . t)
   ))

  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

** Keyword sets

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
          '((sequence "TODO" "|" "DONE")
            (sequence "PROJECT" "AGENDA" "|" "MINUTES")
            (sequence "WAITING" "|" "PROGRESS")))
#+END_SRC

** Clock Table

#+BEGIN_SRC emacs-lisp
  (setq org-duration-format 'h:mm)
#+END_SRC


* PDF Tools

PDF Tools is essentially a replacement of Docview for PDF files.

** Configuration

When using evil with pdf tools and looking at a zoomed PDF, it will
blink, because the cursor blinks. This configuration removes the
blinking cursor retaining it in other modes

#+BEGIN_SRC emacs-lisp
#+END_SRC


* Elfeed

Elfeed is an extensible web feed reader for Emacs, supporting both
Atom and RSS.

** Configuration

#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (require 'elfeed-goodies)

  (global-set-key (kbd "C-x w") 'elfeed)
  (setq-default elfeed-search-filter "@1-week-ago +unread ")
  (elfeed-goodies/setup)
#+END_SRC

Automatic word-wrap for elfeed entries:

#+BEGIN_SRC emacs-lisp
(add-hook 'elfeed-show-mode-hook 'visual-clean)
#+END_SRC

Use VIM style scrolling in elfeed entries:

#+BEGIN_SRC emacs-lisp
  (define-key elfeed-show-mode-map (kbd "C-e") 'evil-scroll-line-down)
  (define-key elfeed-show-mode-map (kbd "C-y") 'evil-scroll-line-up)
#+END_SRC

** Define elfeed feeds
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/elfeed-feeds.el")
#+END_SRC


* Mail

To be worked on


* Org

** General Config

  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  #+END_SRC

** Agenda Setup
#+BEGIN_SRC emacs-lisp
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)

#+END_SRC
** Capture Templates
  #+BEGIN_SRC emacs-lisp
    (setq org-directory "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org")
    (setq org-default-notes-file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/refile.org")
    ;; Use C-c c to start capture mode
    (global-set-key (kbd "C-c c") 'org-capture)

    ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/journal.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("p" "projects" entry (file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/projects.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
  #+END_SRC
** Language support for org mode

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (shell . t)
   (dot . t)
   (js . t)
   (ruby . t)
   ))

  (add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC

** Keyword sets

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC

** Clock Table

#+BEGIN_SRC emacs-lisp
  (setq org-duration-format 'h:mm)
#+END_SRC


* PDF Tools

PDF Tools is essentially a replacement of Docview for PDF files.

** Configuration

When using evil with pdf tools and looking at a zoomed PDF, it will
blink, because the cursor blinks. This configuration removes the
blinking cursor retaining it in other modes

#+BEGIN_SRC emacs-lisp
#+END_SRC


* Elfeed

Elfeed is an extensible web feed reader for Emacs, supporting both
Atom and RSS.

** Configuration

#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (require 'elfeed-goodies)

  (global-set-key (kbd "C-x w") 'elfeed)
  (setq-default elfeed-search-filter "@1-week-ago +unread ")
  (elfeed-goodies/setup)
#+END_SRC

Automatic word-wrap for elfeed entries:

#+BEGIN_SRC emacs-lisp
(add-hook 'elfeed-show-mode-hook 'visual-clean)
#+END_SRC

Use VIM style scrolling in elfeed entries:

#+BEGIN_SRC emacs-lisp
  (define-key elfeed-show-mode-map (kbd "C-e") 'evil-scroll-line-down)
  (define-key elfeed-show-mode-map (kbd "C-y") 'evil-scroll-line-up)
#+END_SRC

** Define elfeed feeds
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/elfeed-feeds.el")
#+END_SRC


* Mail

To be worked on


* Search / Completion

** IDO

=ido= means "Interactively Do Things". =ido= has a completion engine
that's sensible to use everywhere. It is built-in and nice and could
change a lot of defaults like =find-file= and switching buffers.

It works well while not breaking Emacs defaults.

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-enable-flex-matching t)
#+END_SRC

** IDO Vertical Mode

=ido-vertical-mode= makes =ido-mode= display vertically.

#+BEGIN_SRC emacs-lisp
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
(setq ido-vertical-show-count t)
#+END_SRC

** Ivy/Counsel/Swiper

This section install the following packages:

*Ivy*, a generic completion mechanism for Emacs.

*Counsel*, a collection of Ivy-enhanced versions of common Emacs commands.

*Swiper*, an Ivy-enhanced alternative to isearch.


*** Configuration

#+BEGIN_SRC emacs-lisp
    (setq enable-recursive-minibuffers t)
    (global-set-key (kbd "<f6>") 'ivy-resume)
#+END_SRC

Show total amount of matches and the index of the current match

#+BEGIN_SRC emacs-lisp
(setq ivy-count-format "(%d/%d) ")
#+END_SRC

Wrap to the first result when on the last result and vice versa.

#+BEGIN_SRC emacs-lisp
(setq ivy-wrap t)
#+END_SRC

Enable =Swiper=

#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-s" 'swiper)
#+END_SRC

Configure =Counsel=

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'counsel-ibuffer)
  ;; Run `counsel-ag` against the current directory and not against the
  ;; whole project
  (global-set-key (kbd "C-c k") '(lambda()
                                   (interactive)
                                   (counsel-ag "" default-directory nil nil)))
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

Next to counsel, there's also =smex= which is =M-x= combined with
=ido=. =smex= has a better sorting algorithm than =Counsel= and having
both installed means that we get the =Counsel= interface with =smex=
sorting. Best of both worlds.

By default, =counsel-M-x= starts with a =^=. More often than not, this
will be in the way of me fuzzy matching a function. Therefore I'll
start it with an empty string as argument.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") (lambda ()
                                (interactive)
                                (counsel-M-x "")))
#+END_SRC

*** Where =Ivy= doesn't work well

**** Overwriting standard Emacs functionality

Some basic features are overwritten when "everything" becomes an =Ivy=
search buffer. For example:

- When two =dired= buffers are open and files should be copied from
  one to the other, one can use the =up= and =down= keys to toggle the
  destination. When this is a search buffer, it will auto complete for
  all local folders, instead. Since copying files is something I do
  often, this already means I have to disable =Ivy= globally.

- =Tramp= auto-completion doesn't work for me. I'm using =sudo:=, =ssh:=
  and the likes a lot in =dired= mode. Auto completion when within
  =Tramp= is broken for me, so I always have to type out the whole
  connection string when =Ivy= is enabled for =dired=. Since this
  includes missing auto-completion on remote systems and such, it's
  another valid reason to disable =Ivy= globally.

**** Disable Swiper where it is broken

Ivy/Swiper cannot search in PDFs. It tries to search in the PDF source
code. Therefore I fall back to using isearch within PDFs.

#+BEGIN_SRC emacs-lisp
  (add-hook 'pdf-view-mode-hook '(lambda()
                                   (define-key pdf-view-mode-map "\C-s" 'isearch-forward)))
#+END_SRC

*** Improve other packages with ivy

Projectile completion (Default is =ido=)

#+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'ivy)
#+END_SRC

Synosaurus completion (Default is =ido=)

#+BEGIN_SRC emacs-lisp
  (setq synosaurus-choose-method 'ivy-read)
#+END_SRC



Configure =Counsel=

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'counsel-ibuffer)
  ;; Run `counsel-ag` against the current directory and not against the
  ;; whole project
  (global-set-key (kbd "C-c k") '(lambda()
                                   (interactive)
                                   (counsel-ag "" default-directory nil nil)))
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

Next to counsel, there's also =smex= which is =M-x= combined with
=ido=. =smex= has a better sorting algorithm than =Counsel= and having
both installed means that we get the =Counsel= interface with =smex=
sorting. Best of both worlds.

By default, =counsel-M-x= starts with a =^=. More often than not, this
will be in the way of me fuzzy matching a function. Therefore I'll
start it with an empty string as argument.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") (lambda ()
                                (interactive)
                                (counsel-M-x "")))
#+END_SRC

*** Where =Ivy= doesn't work well

**** Overwriting standard Emacs functionality

Some basic features are overwritten when "everything" becomes an =Ivy=
search buffer. For example:

- When two =dired= buffers are open and files should be copied from
  one to the other, one can use the =up= and =down= keys to toggle the
  destination. When this is a search buffer, it will auto complete for
  all local folders, instead. Since copying files is something I do
  often, this already means I have to disable =Ivy= globally.

- =Tramp= auto-completion doesn't work for me. I'm using =sudo:=, =ssh:=
  and the likes a lot in =dired= mode. Auto completion when within
  =Tramp= is broken for me, so I always have to type out the whole
  connection string when =Ivy= is enabled for =dired=. Since this
  includes missing auto-completion on remote systems and such, it's
  another valid reason to disable =Ivy= globally.

**** Disable Swiper where it is broken

Ivy/Swiper cannot search in PDFs. It tries to search in the PDF source
code. Therefore I fall back to using isearch within PDFs.

#+BEGIN_SRC emacs-lisp
  (add-hook 'pdf-view-mode-hook '(lambda()
                                   (define-key pdf-view-mode-map "\C-s" 'isearch-forward)))
#+END_SRC

*** Improve other packages with ivy

Projectile completion (Default is =ido=)

#+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'ivy)
#+END_SRC

Synosaurus completion (Default is =ido=)

#+BEGIN_SRC emacs-lisp
  (setq synosaurus-choose-method 'ivy-read)
#+END_SRC


* Write quality

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "path/to/writegood-mode")
  (require 'writegood-mode)
  (global-set-key "\C-cg" 'writegood-mode)
#+END_SRC


* OS specific
  
** macos

#+BEGIN_SRC emacs-lisp

(global-fira-code-mode)

(when (eq system-type 'darwin)
  ; use spotlight to search with m-x locate
  (setq locate-command "mdfind"))
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+End_SRC
